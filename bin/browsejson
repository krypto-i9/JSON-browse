#! /usr/bin/env node

const { isUndefined, isObject, isNull, isArray, isEmpty } = require("lodash");
const prompt = require("prompt-sync")({ sigint: true });
const fs = require("fs");

const args = process.argv.slice(2);
const root_file_path = args[0];
let clipboard = "";

let g_obj_data;
let g_obj_path_str;
let g_obj_disp;
let root;

try {
  if (fs.existsSync(root_file_path)) {
    print_c_success("File:: " + root_file_path);

    root = JSON.parse(fs.readFileSync(root_file_path));
    print_c_success("Format:: JSON");
    g_obj_data = root;
    g_obj_path_str = "root";
    g_obj_disp = "~";

    while (1) {
      const command = prompt(
        "\x1b[33m" + "browsejson(" + g_obj_disp + "): " + "\x1b[0m"
      );
      const cmd_arr = command.match(/(?:[^\s\"\']+|['"][^\"\']*["'])+/g);
      if (!isNull(cmd_arr) && !isUndefined(cmd_arr)) {
        cmd_arr.forEach((val, i) => {
          cmd_arr[i] = val.replace(/["'"']+/g, "");
        });
        switch (cmd_arr[0]) {
          case "help":
            showHelp(cmd_arr[1]);
            break;
          case "find":
            if (!isEmpty(cmd_arr[1]) && !isUndefined(cmd_arr[1])) {
              let data = [];
              let is_error = false;
              if (cmd_arr[1] === "like") {
                if (!isEmpty(cmd_arr[2]) && !isUndefined(cmd_arr[2])) {
                  data = findLike(cmd_arr[2], cmd_arr[3]);
                  clipboard = data;
                } else {
                  is_error = true;
                  print_error("[key] not provided");
                }
              } else if (cmd_arr[1] === "exec") {
                if (!isEmpty(cmd_arr[2]) && !isUndefined(cmd_arr[2])) {
                  data = findExec(cmd_arr[2], cmd_arr[3]);
                  clipboard = data;
                } else {
                  is_error = true;
                  print_error("[key] not provided");
                }
              } else {
                data = findLike(cmd_arr[1], cmd_arr[2]);
                clipboard = data;
              }
              if (!is_error) {
                console.log(data);
                console.log("Found " + data.length + " Recorde(s)");
              }
            } else {
              print_error(
                "invalid command. type 'help find' to list 'find' commands"
              );
            }
            break;
          case "list":
            if (cmd_arr[1] === "all") {
              if (!isEmpty(cmd_arr[2]) && !isUndefined(cmd_arr[2])) {
                let data = listAll(cmd_arr[2]);
                clipboard = data;
                console.log(data);
                print_info("Found " + data.length + " Recorde(s)");
              } else {
                print_error("[key] not provided");
              }
            }
            break;
          case "print":
            let isShowed = false;
            switch (cmd_arr[1]) {
              case "clipboard":
                printClipboard();
                break;
              case "keys":
                let keys = [];
                if (cmd_arr[2] === "pass") {
                  print_info("pass: true");
                  keys = getKeys(true);
                  clipboard = keys;
                } else {
                  print_info("pass: false");
                  keys = getKeys(false);
                  clipboard = keys;
                }
                console.log(keys);
                console.log(keys.length + " unique key(s).");
                break;
              case "all":
                if (cmd_arr[2] === "length") {
                  isShowed = showLength("this");
                } else {
                  console.log(root);
                }
                break;
              case "this":
                if (cmd_arr[2] === "length") {
                  isShowed = showLength("this");
                } else {
                  console.log(g_obj_data);
                }
                break;
              case "length":
                isShowed = showLength(cmd_arr[2]);
                break;
              case "file":
                console.log(root_file_path);
                break;
              case "":
                print_info("Showing " + g_obj_path_str + " :");
                console.log(g_obj_data);
                break;
              case undefined:
                print_info("Showing " + g_obj_path_str + " :");
                console.log(g_obj_data);
                break;
              default:
                if (!isShowed) {
                  print_error("invalid command");
                }
                break;
            }
            break;
          case "save":
            if (cmd_arr[1] === "clipboard") {
              if (
                !isUndefined(cmd_arr[2]) &&
                !isNull(cmd_arr[2]) &&
                !isEmpty(cmd_arr[2])
              ) {
                if (
                  !isEmpty(clipboard) &&
                  !isNull(clipboard) &&
                  !isUndefined(clipboard)
                ) {
                  saveToFile(cmd_arr[2], JSON.stringify(clipboard, null, 2));
                } else {
                  print_warning("Nothing to save in clipboard");
                }
              } else {
                print_error("filepath not provided");
              }
            } else if (cmd_arr[1] === "this") {
              if (
                !isUndefined(cmd_arr[2]) &&
                !isNull(cmd_arr[2]) &&
                !isEmpty(cmd_arr[2])
              ) {
                saveToFile(cmd_arr[2], JSON.stringify(g_obj_data));
              } else {
                print_error("filepath not provided");
              }
            } else if (cmd_arr[1] === "root") {
              if (
                !isUndefined(cmd_arr[2]) &&
                !isNull(cmd_arr[2]) &&
                !isEmpty(cmd_arr[2])
              ) {
                saveToFile(cmd_arr[2], JSON.stringify(root));
              } else {
                print_error("filepath not provided");
              }
            } else {
              print_error("invalid command");
            }
            break;
          case "set":
            if (cmd_arr[1] === "key") {
              if (!isUndefined(cmd_arr[3]) && !isEmpty(cmd_arr[3]))
                addNewObject(cmd_arr[2], null, true);
              else addNewObject(cmd_arr[2], null, false);
            } else if (cmd_arr[1] === "key_value") {
              addNewObject(cmd_arr[2], cmd_arr[3], false);
            }
            break;
          case "remove":
            if (cmd_arr[1] === "key") {
              if (!isUndefined(cmd_arr[2]) && !isNull(cmd_arr[2])) {
                removeKey(cmd_arr[2]);
              }
            } else {
              print_error("invalid command");
            }
            break;
          case "pwd":
            console.log(g_obj_path_str);
            break;
          case "cd":
            if (cmd_arr[1] === "~") {
              g_obj_data = root;
              g_obj_path_str = "root";
              g_obj_disp = "~";
            } else if (cmd_arr[1] === "..") {
              if (g_obj_path_str == "root") {
                print_info("already in root");
              } else {
                pathBack();
              }
            } else if (!isEmpty(cmd_arr[1]) && !isUndefined(cmd_arr[1])) {
              pathNavigate(cmd_arr[1]);
            } else {
              print_error(
                "invalid command. type 'help cd' to list 'cd' commands"
              );
            }
            break;
          case "clear":
            process.stdout.write("\033c");
            break;
          case "version":
            const __pk_v = require("../package.json");
            console.log(__pk_v.version);
            break;
          case "about":
            const __pk_a = require("../package.json");
            console.log("Package Name : " + __pk_a.name);
            console.log("Author       : " + __pk_a.author["name"]);
            console.log("Version      : " + __pk_a.version);
            console.log("License      : " + __pk_a.license);
            console.log("Homepage     : " + __pk_a.homepage);
            console.log("Git repo     : " + __pk_a.repository.url);
            console.log("Issues       : " + __pk_a.bugs.url);
            break;
          case "exit":
            return;
          default:
            print_error("invalid command");
            break;
        }
      } else {
        print_error("invalid command");
      }
    }
  } else {
    print_c_error("File:: " + root_file_path + "\nError:: No Such File");
  }
} catch (error) {
  if (!isArray(root) && !isObject(root)) {
    print_c_error("Error:: Provided file is not a JSON file");
  } else {
    print_c_error("Error:: Unknown");
    print_c_error(error);
  }
  print_c_error("Exit.");
}

function listAll(key) {
  let data_arr = [];
  if (isArray(g_obj_data)) {
    g_obj_data.forEach((res, _index) => {
      if (!isUndefined(res[key]) && !data_arr.includes(res[key])) {
        data_arr.push(res[key]);
      }
    });
  } else {
    if (!isUndefined(g_obj_data[key]) && !data_arr.includes(g_obj_data[key])) {
      data_arr.push(g_obj_data[key]);
    } else {
      print_error("invalid [key]");
    }
  }
  return data_arr;
}

function findLike(key, value) {
  let data_arr = [];
  let value_arr = [];
  if (typeof value === "string") {
    value = value.toLocaleLowerCase();
    value = value.trim();
    value_arr = value.split(" ");
  }

  if (isArray(g_obj_data)) {
    g_obj_data.forEach((res) => {
      if (!isUndefined(res[key]) && !isNull(res[key])) {
        value_arr.forEach((v) => {
          if (
            res[key].toLowerCase().indexOf(v) !== -1 &&
            !data_arr.includes(res)
          ) {
            data_arr.push(res);
          }
        });
      }
    });
  } else {
    if (!isUndefined(g_obj_data[key]) && !isNull(g_obj_data[key])) {
      value_arr.forEach((v) => {
        if (
          JSON.stringify(g_obj_data[key]).toLowerCase().indexOf(v) !== -1 &&
          !data_arr.includes(g_obj_data[key])
        ) {
          data_arr.push(g_obj_data[key]);
        }
      });
    } else {
      print_error("invalid [key]");
    }
  }
  return data_arr;
}

function findExec(key, value) {
  let data_arr = [];
  value = typeof value === "string" ? value.toLowerCase() : value;
  if (isArray(g_obj_data)) {
    g_obj_data.forEach((res, _index) => {
      if (!isUndefined(res[key]) && !isNull(res[key])) {
        if (res[key].toLowerCase().includes(value)) {
          data_arr.push(res);
        }
      }
    });
  } else {
    if (!isUndefined(g_obj_data[key]) && !isNull(g_obj_data[key])) {
      if (JSON.stringify(g_obj_data[key]).toLowerCase() === value) {
        data_arr.push(g_obj_data[key]);
      }
    } else {
      print_error("invalid [key]");
    }
  }
  return data_arr;
}

function getKeys(pass) {
  const keys_arr = [];
  if (pass && !isUndefined(g_obj_data)) {
    for (let i = 0; i < g_obj_data.length; i++) {
      if (!isNull(g_obj_data[i]) && !isUndefined(g_obj_data[i])) {
        Object.keys(g_obj_data[i]).forEach((key) => {
          if (!keys_arr.includes(key)) {
            keys_arr.push(key);
          }
        });
      }
    }
  } else if (isObject(g_obj_data)) {
    Object.keys(g_obj_data).forEach((key) => {
      if (!keys_arr.includes(key)) {
        keys_arr.push(key);
      }
    });
  }
  return keys_arr;
}

function printClipboard() {
  if (!isEmpty(clipboard)) console.log(clipboard);
  else print_info("clipboard is empty");
}

function saveToFile(filepath, data) {
  if (!isUndefined(filepath) && !isNull(filepath)) {
    let fileIsExist = fs.existsSync(filepath);
    if (fileIsExist) {
      let inp = prompt(
        "File already exist. Overwrite existing file? (yes/no): "
      );
      if (inp === "yes" || inp === "y") {
        fs.writeFileSync(filepath, data);
        print_success("file saved successfully");
      } else {
        print_warning("operation canceled");
      }
    } else {
      fs.writeFileSync(filepath, data);
      print_success("file saved successfully");
    }
  } else {
    print_error("filepath isn't provided");
  }
}

function removeKey(key) {
  if (Object.keys(eval(g_obj_path_str)).includes(key)) {
    delete g_obj_data[key];
    print_info("deleted " + `${g_obj_path_str}['${key}']`);
  } else {
    print_error("invalid [key]");
  }
}

function pathNavigate(cmd) {
  const obj_split = cmd.split(">");
  obj_split.every((value, index) => {
    if (index < obj_split.length && value !== " ") {
      if (
        !isNull(eval(g_obj_path_str)) &&
        Object.keys(eval(g_obj_path_str)).includes(value)
      ) {
        g_obj_disp += "> " + value;
        g_obj_path_str += "['" + value + "']";
        return true;
      } else {
        print_error("invalid [key]");
        return false;
      }
    }
  });
  g_obj_data = eval(g_obj_path_str);
}

function pathBack() {
  let obj_split = g_obj_disp.split(">");
  obj_split.forEach((value, index) => {
    value = value.trim();
    if (index < obj_split.length - 1 && value !== " ") {
      if (value === "~") {
        g_obj_path_str = "root";
        g_obj_disp = "~";
      } else if (Object.keys(eval(g_obj_path_str)).includes(value)) {
        g_obj_disp += "> " + value;
        g_obj_path_str += "['" + value + "']";
      } else {
        print_error("invalid [key]");
        return;
      }
    }
  });
  g_obj_data = eval(g_obj_path_str);
}

function addNewObject(key, value, isWarn) {
  if (key !== "" && !isUndefined(key)) {
    let val = null;
    if (
      value !== "" &&
      !isUndefined(value) &&
      !isNull(value) &&
      value !== "null"
    ) {
      val = value;
    } else {
      if (value !== null)
        print_warning("value not provided. Set value to null");
    }
    let tmp;
    if (!isNull(val) && typeof val !== "number" && typeof value !== "boolean") {
      tmp = g_obj_path_str + "['" + key + "'] = " + '"' + val + '"';
    } else {
      tmp = g_obj_path_str + "['" + key + "'] = " + val;
    }
    eval(tmp);
    print_success("Set " + tmp);
    if (isWarn)
      print_warning(
        'value provided is ignored. use "set new key_value" to set key and value both'
      );
  } else {
    print_error("[key] not provided.");
  }
}

function showLength(cmd) {
  switch (cmd) {
    case "this":
      if (!isNull(g_obj_data) && !isUndefined(g_obj_data)) {
        console.log(g_obj_data.length);
      } else {
        print_info("null value. no length");
      }
      break;
    case "all":
      if (!isNull(root) && !isUndefined(root)) {
        console.log(root.length);
      } else {
        print_info("null value. no length");
      }
      break;
    default:
      print_info("Showing " + g_obj_path_str + " value length");
      if (!isNull(g_obj_data) && !isUndefined(g_obj_data)) {
        console.log(g_obj_data.length);
      } else {
        print_info("null value. no length");
      }
      break;
  }
  return true;
}

function showHelp(key) {
  switch (key) {
    case "print":
      console.log(
        "  print                            => print value of current object(pwd)\n" +
          "  print clipboard                  => print value in clipboard\n" +
          "  print keys                       => print all unique keys in JSON Object\n" +
          "  print keys pass                  => print all unique keys inside JSON Object Array\n" +
          "  print this                       => print value of current object(pwd)\n" +
          "  print this length                => print length of current object(pwd)\n" +
          "  print all                        => print value of root object\n" +
          "  print all length                 => print length of root object"
      );
      break;
    case "list":
      console.log(
        "  list all [key]                   => list all values in given [key]"
      );
      break;
    case "cd":
      console.log(
        "  cd ~                             => navigate to root\n" +
          "  cd [key]                         => navigate to root[key]\n" +
          "  cd [key1>key2>key3]              => navigate to root[key1][key2][key3]. (no spaces between '>')\n" +
          "  cd ..                            => navigate one key back"
      );
      break;
    case "find":
      console.log(
        "  find [key] {value}               => find all Objects with matching [key] and {value}\n" +
          "  find like [key] {value}          => find all Objects with like matching [key] and {value}\n" +
          "  find exec [key] {value}          => find all Objects with exact matching [key] and {value}\n\n" +
          "  (Note: for space seperated values use quotes. ex: \"hello world\" or 'hello world')"
      );
      break;
    case "save":
      console.log(
        "  save clipboard [filepath]        => write data in clipboard to given file\n" +
          "  save this [filepath]             => write this(pwd) to given file\n" +
          "  save root [filepath]             => write data in root(all data) to given file"
      );
      break;
    case "set":
      console.log(
        " set key [name]                => create new key in current object(pwd)\n" +
          " set key_value [name] {?value} => create new key and set value in current object(pwd). if value not provide, then set to null"
      );
      break;
    case "pwd":
      console.log(
        "  pwd                              => print current JSON Object path"
      );
      break;
    case "remove":
      console.log(
        "  remove [key]                     => remove [key] and it's value from JSON object"
      );
      break;
    default:
      print_c_warning("print");
      console.log(
        "  print                            => print value of current object(pwd)\n" +
          "  print clipboard                  => print value in clipboard\n" +
          "  print keys                       => print all unique keys in JSON Object\n" +
          "  print keys pass                  => print all unique keys inside JSON Object Array\n" +
          "  print clipboard                  => print clipboard value\n" +
          "  print this                       => print value of current object(pwd)\n" +
          "  print this length                => print length of current object(pwd)\n" +
          "  print all                        => print value of root object\n" +
          "  print all length                 => print length of root object\n"
      );
      print_c_warning("list");
      console.log(
        "  list all [key]                   => list all values in given [key]\n"
      );
      print_c_warning("cd");
      console.log(
        "  cd ~                             => navigate to root\n" +
          "  cd [key]                         => navigate to root[key]\n" +
          "  cd [key1>key2>key3]              => navigate to root[key1][key2][key3]. (no spaces between '>')\n" +
          "  cd ..                            => navigate one key back\n"
      );
      print_c_warning("find");
      console.log(
        "  find [key] {value}               => find all Objects with matching [key] and {value}\n" +
          "  find like [key] {value}          => find all Objects with like matching [key] and {value}\n" +
          "  find exec [key] {value}          => find all Objects with exact matching [key] and {value}\n" +
          "  (Note: for space seperated values use quotes. ex: \"hello world\" or 'hello world')\n"
      );
      print_c_warning("set");
      console.log(
        " set key [name]                => create new key in current object(pwd)\n" +
          " set key_value [name] {?value} => create new key and set value in current object(pwd). if value not provide, then set to null\n"
      );
      print_c_warning("remove");
      console.log(
        "  remove [key]                     => remove [key] and it's value from JSON object\n"
      );
      print_c_warning("save");
      console.log(
        "  save clipboard [filepath]        => write data in clipboard to given file\n" +
          "  save this [filepath]             => write this(pwd) to given file\n" +
          "  save root [filepath]             => write data in root(all data) to given file\n"
      );
      print_c_warning("pwd");
      console.log(
        "  pwd                              => print current JSON Object path\n"
      );
      print_c_warning("clear");
      console.log("  clear                            => clear console\n");

      print_c_warning("exit");
      console.log("  exit                             => exit\n");
  }
}

function print_success(msg) {
  console.log("\x1b[32m[✔]Success::\x1b[0m " + msg);
}

function print_error(msg) {
  console.log("\x1b[31m[✘]Error::\x1b[0m " + msg);
}

function print_info(msg) {
  console.log("\x1b[34m[•]Info::\x1b[0m " + msg);
}

function print_warning(msg) {
  console.log("\x1b[33m[?]Warning::\x1b[0m " + msg);
}

function print_c_success(msg) {
  console.log("\x1b[32m%s\x1b[0m", msg);
}

function print_c_error(msg) {
  console.log("\x1b[31m%s\x1b[0m", msg);
}

function print_c_info(msg) {
  console.log("\x1b[34m%s\x1b[0m", msg);
}

function print_c_warning(msg) {
  console.log("\x1b[33m%s\x1b[0m", msg);
}
